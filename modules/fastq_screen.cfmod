#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

##########################################################################
# Copyright 2014, Philip Ewels (phil.ewels@babraham.ac.uk)               #
#                                                                        #
# This file is part of Cluster Flow.                                     #
#                                                                        #
# Cluster Flow is free software: you can redistribute it and/or modify   #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# Cluster Flow is distributed in the hope that it will be useful,        #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with Cluster Flow.  If not, see <http://www.gnu.org/licenses/>.  #
##########################################################################

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem=s" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.

################################################################################
#
#	WARNING
#
#	Fastq Screen has 8 cores set as a config option in it's config file
#	Currently uses this, can't be set on the command line
#	If given less than 8 cores, will presumably overrun and cause problems
#
#	Command line override has been requested as a feature for Fastq Screen
#	Code is half-written ready to be put in below
#
#################################################################################

if($required_cores){
	# print CF::Helpers::allocate_cores($required_cores, 1, 8);
	print 8;
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print CF::Helpers::allocate_memory($required_mem, '3G', '4G');
	exit;
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
	print 'fastq_screen';
	exit;
}
# --help. Print help.
if($help){
	print "".("-"x21)."\n FastQ Screen Module\n".("-"x21)."\n
FastQ Screen is a quality control tool that allows you to
take a sequence dataset and search it against a set of bowtie databases.\n
For further information, please run fastq_screen --help\n\n";
	exit;
}

# MODULE
my $timestart = time;

# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;


# How many cores have we been given?
if(!defined($cores) || $cores <= 0){
	$cores = 1;
}


# Separate file names into single end and paired end
my ($se_files, $pe_files) = CF::Helpers::is_paired_end(\%config, @$files);

# FastQ encoding type. Once found on one file will assume all others are the same
my $encoding = 0;

# Go through each single end files and run Fastq Screen
if($se_files && scalar(@$se_files) > 0){
	foreach my $file (@$se_files){
		
		# Figure out the encoding if we don't already know
		if(!$encoding){
			($encoding) = CF::Helpers::fastq_encoding_type($file);
		}
		my $enc = "";
		if($encoding eq 'phred64'){
			$enc = '--illumina1_3';
		}
		
		# Uses --cores $cores when this is written into Fastq Screen
		my $command = "fastq_screen --subset 100000 $enc --quiet --aligner bowtie2 $file";
		warn "\n###CFCMD $command\n\n";
		
		if(!system ($command)){
			my $duration =  CF::Helpers::parse_seconds(time - $timestart);
			warn "###CF Fastq Screen (SE mode) successfully ran, took $duration\n";
		} else {
			print "###CF Error! Fastq Screen (SE mode) Failed: $? $!\n";
		}
	}
}

# Go through the paired end files and run Bowtie
if($pe_files && scalar(@$pe_files) > 0){
	foreach my $files_ref (@$pe_files){
		my @files = @$files_ref;
		if(scalar(@files) == 2){
			# Figure out the encoding if we don't already know
			if(!$encoding){
				($encoding) = CF::Helpers::fastq_encoding_type($files[0]);
			}
			my $enc = "";
			if($encoding eq 'phred64'){
				$enc = '--illumina1_3';
			}
			
			# Uses --cores $cores when this is written into Fastq Screen
			my $command = "fastq_screen --subset 100000 $enc --quiet --aligner bowtie2 --paired ".$files[0]." ".$files[1];
			warn "\n###CFCMD $command\n\n";
			
			if(!system ($command)){
				my $duration =  CF::Helpers::parse_seconds(time - $timestart);
				warn "###CF Fastq Screen (PE mode) successfully ran, took $duration\n";
			} else {
				print "###CF Error! Fastq Screen (PE mode) Failed: $? $!\n";
			}
		} else {
			warn "\n###CF Error! Fastq Screen paired end files had ".scalar(@files)." input files instead of 2\n";
		}
	}
}

