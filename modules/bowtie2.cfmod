#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

##########################################################################
# Copyright 2014, Philip Ewels (phil.ewels@babraham.ac.uk)               #
#                                                                        #
# This file is part of Cluster Flow.                                     #
#                                                                        #
# Cluster Flow is free software: you can redistribute it and/or modify   #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# Cluster Flow is distributed in the hope that it will be useful,        #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with Cluster Flow.  If not, see <http://www.gnu.org/licenses/>.  #
##########################################################################

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print CF::Helpers::allocate_cores($required_cores, 1, 8);
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print CF::Helpers::allocate_memory($required_mem, '4G', '5G');
	exit;
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
	print 'bowtie2,samtools';
	exit;
}
# --help. Print help.
if($help){
	print "".("-"x17)."\n Bowtie 2 Module\n".("-"x17)."\n
Bowtie 2 is an ultrafast and memory-efficient tool for aligning sequencing
reads to long reference sequences. It is particularly good at aligning reads
of about 50 up to 100s or 1,000s of characters, and particularly good at
aligning to relatively long (e.g. mammalian) genomes.
This script works out the encoding of input files, guesses whether they're
paired end or not and runs bowtie 2. Output is piped through samtools to
generate BAM files.\n
For further information, please run bowtie2 --help\n\n";
	exit;
}

# MODULE
my $timestart = time;

# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

# Check that we have a genome defined
if(!defined($config{bowtie2_path})){
	if (defined($config{bowtie_path})){
		warn "\n\n###CF Error: No bowtie2 path found in run file $runfile for job $job_id.\n Exiting.. ###\n";
		exit;
		# In future version, may do defaulting back to bowtie1:
		#warn "\n\n###CF No bowtie2 path found in run file $runfile for job $job_id.\n Defaulting to bowtie path: ".$config{bowtie_path}."\n\n";
		#$config{bowtie2_path} = $config{bowtie_path};
	}  else  {
		warn "\n\n###CF Error: No bowtie or bowtie2 path found in run file $runfile for job $job_id. Exiting.. ###";
		exit;
	}
} else {
	warn "\nAligning against ".$config{bowtie2_path}."\n\n";
}

if(!defined($cores) || $cores < 1){
	$cores = 1;
}

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Separate file names into single end and paired end
my ($se_files, $pe_files) = CF::Helpers::is_paired_end(\%config, @$files);

# FastQ encoding type. Once found on one file will assume all others are the same
my $encoding = 0;

# Go through each single end files and run Bowtie
if($se_files && scalar(@$se_files) > 0){
	foreach my $file (@$se_files){
		
		# Figure out the encoding if we don't already know
		if(!$encoding){
			($encoding) = CF::Helpers::fastq_encoding_type($file);
		}
		my $enc = "";
		if($encoding eq 'phred33' || $encoding eq 'phred64' || $encoding eq 'solexa'){
			$enc = '--'.$encoding.'-quals';
		}
		
		my $output_fn = $file."_bowtie2.bam";
		
		my $command = "bowtie2 -p $cores -t $enc -x ".$config{bowtie2_path}." -U $file | samtools view -bS - > $output_fn";
		warn "\n###CFCMD $command\n\n";
		
		if(!system ($command)){
			# Bowtie worked - print out resulting filenames
			my $duration =  CF::Helpers::parse_seconds(time - $timestart);
			warn "###CF Bowtie2 (SE mode) successfully exited, took $duration..\n";
			if(-e $output_fn){
				print RUN "$job_id\t$output_fn\n"; 
			} else {
				warn "\n###CF Error! Bowtie2 output file $output_fn not found..\n";
			}
		} else {
			warn "\n###CF Error! Bowtie2 (SE mode) failed exited in an error state: $? $!\n\n";
		}
	}
}

# Go through the paired end files and run Bowtie
if($pe_files && scalar(@$pe_files) > 0){
	foreach my $files_ref (@$pe_files){
		my @files = @$files_ref;
		if(scalar(@files) == 2){
			
			# Figure out the encoding if we don't already know
			if(!$encoding){
				($encoding) = CF::Helpers::fastq_encoding_type($files[0]);
			}
			my $enc = "";
			if($encoding eq 'phred33' || $encoding eq 'phred64' || $encoding eq 'solexa'){
				$enc = '--'.$encoding.'-quals';
			}
			
			my $output_fn = $files[0]."_bowtie2.bam";
			
			my $command = "bowtie2 -p $cores -t $enc -x ".$config{bowtie_path}." -1 ".$files[0]." -2 ".$files[1]." | samtools view -bS - > $output_fn";
			warn "\n###CFCMD $command\n\n";
			
			if(!system ($command)){
				# Bowtie worked - print out resulting filenames
				my $duration =  CF::Helpers::parse_seconds(time - $timestart);
				warn "###CF Bowtie2 (PE mode) successfully exited, took $duration..\n";
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n";
				} else {
					warn "\n###CF Error! Bowtie2 output file $output_fn not found..\n";
				}
			} else {
				warn "\n###CF Error! Bowtie2 (PE mode) exited in an error state: $? $!\n\n";
			}
			
		} else {
			warn "\n###CF Error! Bowtie2 paired end files had ".scalar(@files)." input files instead of 2\n";
		}
	}
}


close (RUN);