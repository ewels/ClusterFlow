#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

##########################################################################
# Copyright 2014, Philip Ewels (phil.ewels@babraham.ac.uk)               #
#                                                                        #
# This file is part of Cluster Flow.                                     #
#                                                                        #
# Cluster Flow is free software: you can redistribute it and/or modify   #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# Cluster Flow is distributed in the hope that it will be useful,        #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with Cluster Flow.  If not, see <http://www.gnu.org/licenses/>.  #
##########################################################################

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
    print CF::Helpers::allocate_cores($required_cores, 1, 8);
    exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
    print CF::Helpers::allocate_memory($required_mem, '4G', '5G');
    exit;
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
    print 'bowtie,bowtie2,samtools';
    exit;
}
# --help. Print help.
if($help){
    print "".("-"x22)."\n Bowtie 1 or 2 Module\n".("-"x22)."\n
This module inspects the first input file and calculates the
read length. If this is >= 50bp, it aligns with the Bowtie 2
module. If not, it aligns with the Bowtie 1 module.\n
This module assumes that the bowtie1.cfmod and bowtie2.cfmod
module files are contained within the same directory as this script.\n
See cf --help bowtie1 and cf --help bowtie2 for more information
on these modules.\n\n";
    exit;
}

# MODULE

# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);

# Look at the read length of the first file
if(!CF::Helpers::fastq_min_length($files->[0], 50)){
	warn "\n\n###CF First file has reads < 50bp long. Using bowtie 1 for alignment.\n";
	
	my $command = "$FindBin::Bin/bowtie1.cfmod ".join(" ", @ARGV);
	warn "\nBowtie 1 module command: $command\n\n";
	
	system($command);
	
} else {
	warn "\n\n###CF First file has reads >= 50bp long. Using bowtie 2 for alignment.\n";
	
	my $command = "$FindBin::Bin/bowtie2.cfmod ".join(" ", @ARGV);
	warn "\nBowtie 2 module command: $command\n\n";
	
	system($command);
	
}
	
	
